AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Template for the TrackFlix Live application

Globals:
  Function:
    Timeout: 60
    Architectures:
      - x86_64
    Runtime: nodejs20.x
    LoggingConfig:
      LogFormat: JSON

Resources:
  #############
  # IAM ROLES #
  #############
  ProjectLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: !Sub "${AWS::StackName}-DynamoDB-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "dynamodb:PutItem"
                  - "dynamodb:Scan"
                  - "dynamodb:GetItem"
                Resource:
                  - !GetAtt EventsTable.Arn
              - Effect: Allow
                Action:
                  - "dynamodb:GetItem"
                  - "dynamodb:DeleteItem"
                Resource:
                  - !GetAtt TaskTokensTable.Arn
        - PolicyName: !Sub "${AWS::StackName}-EventBridge-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "events:PutRule"
                  - "events:PutTargets"
                Resource:
                  - !Sub "arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/TrackflixLiveTx-*"
        - PolicyName: !Sub "${AWS::StackName}-StepFunctions-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "states:StartExecution"
                  - "states:SendTaskSuccess"
                Resource:
                  - !Ref StartTransmissionStateMachine
        - PolicyName: !Sub "${AWS::StackName}-IoTCore-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "iot:Publish"
                Resource: !Sub "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/${AWS::StackName}"
  PermissionForEventBridgeToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref StartTransmission
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !Sub "arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/TrackflixLiveTx-*"
  StepFunctionsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: "sts:AssumeRole"
            Principal:
              Service: "states.amazonaws.com"
            Effect: "Allow"
      Policies:
        - PolicyName: StepFunctionsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "lambda:InvokeFunction"
                Resource:
                  - !GetAtt CreateMediaPackageChannel.Arn
                  - !GetAtt CreateMediaLiveChannel.Arn
                  - !GetAtt StartMediaLiveChannel.Arn
                Effect: "Allow"
  IoTCoreAccessRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                cognito-identity.amazonaws.com:aud: !Ref IdentityPool
              "ForAnyValue:StringLike":
                cognito-identity.amazonaws.com:amr: authenticated
      Policies:
        - PolicyName: IoTCoreAccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "iot:Connect"
                  - "iot:Publish"
                  - "iot:Subscribe"
                  - "iot:Receive"
                Resource: "*"
  MediaLiveRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: "sts:AssumeRole"
            Principal:
              Service: "medialive.amazonaws.com"
            Effect: "Allow"
      Policies:
        - PolicyName: MediaLiveCustomPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - ssm:Describe*
                  - ssm:Get*
                  - ssm:List*
                Resource: "*"
                Effect: Allow
              - Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:PutObject
                  - s3:GetObject
                  - s3:DeleteObject
                Resource: "*"
              - Effect: Allow
                Action:
                  - mediastore:ListContainers
                  - mediastore:PutObject
                  - mediastore:GetObject
                  - mediastore:DeleteObject
                  - mediastore:DescribeObject
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                  - logs:DescribeLogGroups
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - mediaconnect:ManagedDescribeFlow
                  - mediaconnect:ManagedAddOutput
                  - mediaconnect:ManagedRemoveOutput
                Resource: "*"
              - Effect: Allow
                Action:
                  - ec2:describeSubnets
                  - ec2:describeNetworkInterfaces
                  - ec2:createNetworkInterface
                  - ec2:createNetworkInterfacePermission
                  - ec2:deleteNetworkInterface
                  - ec2:deleteNetworkInterfacePermission
                  - ec2:describeSecurityGroups
                  - ec2:describeAddresses
                  - ec2:associateAddress
                Resource: "*"
              - Effect: Allow
                Action:
                  - mediapackage:DescribeChannel
                Resource: "*"
              - Effect: Allow
                Action:
                  - mediapackagev2:PutObject
                  - mediapackagev2:GetChannel
                Resource: "*"
              - Effect: Allow
                Action:
                  - kms:GenerateDataKey
                Resource: "*"
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: "*"
  StateMachineLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: !Sub "${AWS::StackName}-MediaPackage-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "mediapackage:CreateChannel"
                Resource:
                  - !Sub "arn:aws:mediapackage:${AWS::Region}:${AWS::AccountId}:channels/*"
              - Effect: Allow
                Action:
                  - "mediapackage:CreateOriginEndpoint"
                Resource:
                  - !Sub "arn:aws:mediapackage:${AWS::Region}:${AWS::AccountId}:origin_endpoints/*"
        - PolicyName: !Sub "${AWS::StackName}-MediaLive-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "medialive:CreateInput"
                Resource:
                  - !Sub "arn:aws:medialive:${AWS::Region}:${AWS::AccountId}:input:*"
              - Effect: Allow
                Action:
                  - "medialive:CreateChannel"
                  - "medialive:StartChannel"
                Resource:
                  - !Sub "arn:aws:medialive:${AWS::Region}:${AWS::AccountId}:channel:*"
        - PolicyName: !Sub "${AWS::StackName}-IAM-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "iam:PassRole"
                Resource:
                  - !GetAtt MediaLiveRole.Arn
        - PolicyName: !Sub "${AWS::StackName}-DynamoDB-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "dynamodb:PutItem"
                Resource:
                  - !GetAtt TaskTokensTable.Arn

  ###########
  # COGNITO #
  ###########
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub "${AWS::StackName}"
      Policies:
        PasswordPolicy:
          MinimumLength: 12
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
      UsernameAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: true
          StringAttributeConstraints:
            MaxLength: 320
            MinLength: 3

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub "${AWS::StackName}"
      UserPoolId: !Ref UserPool
      ExplicitAuthFlows:
        - ALLOW_ADMIN_USER_PASSWORD_AUTH
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      CallbackURLs:
        - !Sub "http://localhost:3000/auth_callback"
      SupportedIdentityProviders:
        - COGNITO
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes:
        - email
        - openid
        - profile
      AllowedOAuthFlows:
        - code

  IdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: !Sub "${AWS::StackName}"
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId:
            Ref: UserPoolClient
          ProviderName:
            Fn::GetAtt:
              - UserPool
              - ProviderName

  IdentityPoolRoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        authenticated: !GetAtt IoTCoreAccessRole.Arn

  ###################
  # DYNAMODB TABLES #
  ###################
  EventsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "events-${AWS::StackName}"
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: "S"
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
  TaskTokensTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "taskTokens-${AWS::StackName}"
      AttributeDefinitions:
        - AttributeName: key
          AttributeType: "S"
      KeySchema:
        - AttributeName: key
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  ####################
  # LAMBDA FUNCTIONS #
  ####################
  CreateEvent:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/handlers/createEvent/
      Handler: handler.main
      Role: !GetAtt ProjectLambdaRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref EventsTable
          START_TX_LAMBDA: !GetAtt StartTransmission.Arn
          IOT_TOPIC: !Sub "${AWS::StackName}"
      Events:
        CreateEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /event
            Method: post
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Format: cjs
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - handler.ts
  GetEvent:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/handlers/getEvent/
      Handler: handler.main
      Role: !GetAtt ProjectLambdaRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref EventsTable
      Events:
        GetEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /event/{eventId}
            Method: get
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Format: cjs
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - handler.ts
  ListEvents:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/handlers/listEvents/
      Handler: handler.main
      Role: !GetAtt ProjectLambdaRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref EventsTable
      Events:
        ListEvents:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /events
            Method: get
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Format: cjs
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - handler.ts
  HandleMediaLiveChannelStateChange:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/handlers/handleMediaLiveChannelStateChange/
      Handler: handler.main
      Role: !GetAtt ProjectLambdaRole.Arn
      Environment:
        Variables:
          TASK_TOKENS_TABLE: !Ref TaskTokensTable
      Events:
        HandleMediaLiveChannelStateChange:
          Type: CloudWatchEvent
          Properties:
            Pattern:
              source:
                - aws.medialive
              detail-type:
                - MediaLive Channel State Change
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Format: cjs
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - handler.ts
  StartTransmission:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/handlers/startTransmission/
      Handler: handler.main
      Role: !GetAtt ProjectLambdaRole.Arn
      Environment:
        Variables:
          START_TX_STATE_MACHINE: !Ref StartTransmissionStateMachine
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Format: cjs
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - handler.ts
  CreateMediaPackageChannel:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/stateMachines/createMediaPackageChannel/
      Handler: handler.main
      Role: !GetAtt StateMachineLambdaRole.Arn
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Format: cjs
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - handler.ts
  CreateMediaLiveChannel:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/stateMachines/createMediaLiveChannel/
      Handler: handler.main
      Role: !GetAtt StateMachineLambdaRole.Arn
      Environment:
        Variables:
          TASK_TOKENS_TABLE: !Ref TaskTokensTable
          MEDIA_LIVE_ROLE: !GetAtt MediaLiveRole.Arn
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Format: cjs
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - handler.ts
  StartMediaLiveChannel:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/stateMachines/startMediaLiveChannel/
      Handler: handler.main
      Role: !GetAtt StateMachineLambdaRole.Arn
      Environment:
        Variables:
          TASK_TOKENS_TABLE: !Ref TaskTokensTable
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Format: cjs
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - handler.ts

  ####################
  #    API GATEWAY   #
  ####################
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "${AWS::StackName}"
      StageName: prod
      Cors:
        AllowMethods: "'*'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        AddDefaultAuthorizerToCorsPreflight: False
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt UserPool.Arn

  ####################
  #  STATE MACHINES  #
  ####################
  StartTransmissionStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Sub "${AWS::StackName}-StartTransmission"
      DefinitionString: |
        {
          "Comment": "State machine to start a Trackflix Live transmission",
          "StartAt": "Create MediaPackage channel",
          "States": {
            "Create MediaPackage channel": {
              "Type": "Task",
              "Resource": "${CreateMediaPackageChannel}",
              "Next": "Create MediaLive channel"
            },
            "Create MediaLive channel": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
              "Parameters": {
                "FunctionName": "${CreateMediaLiveChannel}",
                "Payload": {
                  "input.$": "$",
                  "taskToken.$": "$$.Task.Token"
                }
              },
              "Next": "Start MediaLive channel"
            },
            "Start MediaLive channel": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
              "Parameters": {
                "FunctionName": "${StartMediaLiveChannel}",
                "Payload": {
                  "input.$": "$",
                  "taskToken.$": "$$.Task.Token"
                }
              },
              "End": true
            }
          }
        }
      DefinitionSubstitutions:
        CreateMediaPackageChannel: !GetAtt CreateMediaPackageChannel.Arn
        CreateMediaLiveChannel: !GetAtt CreateMediaLiveChannel.Arn
        StartMediaLiveChannel: !GetAtt StartMediaLiveChannel.Arn
      RoleArn: !GetAtt StepFunctionsRole.Arn
